document.addEventListener('DOMContentLoaded', function() {
    const csrfToken = document.querySelector('#csrf-form input[name="csrfmiddlewaretoken"]').value;
    const subscriptionData = document.getElementById('subscriptionData');
    const subscribedCodes = JSON.parse(subscriptionData.dataset.subscribed || '[]');
    
    const regions = [
        {name: "–ê–¥—ã–≥–µ—è", code: "AD"},
        {name: "–ê–ª—Ç–∞–π", code: "AL"},
        {name: "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π", code: "ALT"},
        {name: "–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "AMU"},
        {name: "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ARK"},
        {name: "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "AST"},
        {name: "–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω", code: "BA"},
        {name: "–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "BEL"},
        {name: "–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "BRY"},
        {name: "–ë—É—Ä—è—Ç–∏—è", code: "BU"},
        {name: "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "VLA"},
        {name: "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "VGG"},
        {name: "–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "VLG"},
        {name: "–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "VOR"},
        {name: "–î–∞–≥–µ—Å—Ç–∞–Ω", code: "DA"},
        {name: "–ï–≤—Ä–µ–π—Å–∫–∞—è –ê–û", code: "YEV"},
        {name: "–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π", code: "ZAB"},
        {name: "–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "IVA"},
        {name: "–ò–Ω–≥—É—à–µ—Ç–∏—è", code: "IN"},
        {name: "–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "IRK"},
        {name: "–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è", code: "KB"},
        {name: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KGD"},
        {name: "–ö–∞–ª–º—ã–∫–∏—è", code: "KL"},
        {name: "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KLU"},
        {name: "–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π", code: "KAM"},
        {name: "–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å–∏—è", code: "KC"},
        {name: "–ö–∞—Ä–µ–ª–∏—è", code: "KR"},
        {name: "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KEM"},
        {name: "–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KIR"},
        {name: "–ö–æ–º–∏", code: "KO"},
        {name: "–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KOS"},
        {name: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", code: "KDA"},
        {name: "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π", code: "KYA"},
        {name: "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º", code: "CR"},
        {name: "–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KGN"},
        {name: "–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KRS"},
        {name: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "LEN"},
        {name: "–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "LIP"},
        {name: "–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "MAG"},
        {name: "–ú–∞—Ä–∏–π –≠–ª", code: "ME"},
        {name: "–ú–æ—Ä–¥–æ–≤–∏—è", code: "MO"},
        {name: "–ú–æ—Å–∫–≤–∞", code: "MOW"},
        {name: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "MOS"},
        {name: "–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "MUR"},
        {name: "–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û", code: "NEN"},
        {name: "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "NIZ"},
        {name: "–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "NGR"},
        {name: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "NVS"},
        {name: "–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "OMS"},
        {name: "–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ORE"},
        {name: "–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ORL"},
        {name: "–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "PNZ"},
        {name: "–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π", code: "PER"},
        {name: "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π", code: "PRI"},
        {name: "–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "PSK"},
        {name: "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ROS"},
        {name: "–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "RYA"},
        {name: "–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "SAM"},
        {name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", code: "SPE"},
        {name: "–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "SAR"},
        {name: "–°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)", code: "SA"},
        {name: "–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "SAK"},
        {name: "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "SVE"},
        {name: "–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è", code: "SE"},
        {name: "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "SMO"},
        {name: "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π", code: "STA"},
        {name: "–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "TAM"},
        {name: "–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", code: "TA"},
        {name: "–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "TVE"},
        {name: "–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "TOM"},
        {name: "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "TUL"},
        {name: "–¢—ã–≤–∞", code: "TY"},
        {name: "–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "TYU"},
        {name: "–£–¥–º—É—Ä—Ç–∏—è", code: "UD"},
        {name: "–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ULY"},
        {name: "–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π", code: "KHA"},
        {name: "–•–∞–∫–∞—Å–∏—è", code: "KK"},
        {name: "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û", code: "KHM"},
        {name: "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "CHE"},
        {name: "–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", code: "CE"},
        {name: "–ß—É–≤–∞—à–∏—è", code: "CU"},
        {name: "–ß—É–∫–æ—Ç—Å–∫–∏–π –ê–û", code: "CHU"},
        {name: "–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û", code: "YAN"},
        {name: "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "YAR"},
        {name: "–õ—É–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "LUG"},
        {name: "–î–æ–Ω–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "DON"},
        {name: "–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "KHE"},
        {name: "–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ZAP"}
    ];

    const container = document.getElementById('regionsContainer');
    const searchInput = document.getElementById('regionSearch');
    const clearSearchBtn = document.getElementById('clearSearch');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    function updateButtonState(button, isSubscribed) {
        button.dataset.subscribed = isSubscribed;
        button.querySelector('.btn-text').textContent = isSubscribed ? '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
        button.querySelector('.btn-icon').textContent = isSubscribed ? 'üîî' : 'üîï';
        button.classList.toggle('subscribed', isSubscribed);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
    function renderRegions(filter = '') {
        container.innerHTML = '';
        const searchTerm = filter.toLowerCase();
        
        regions.forEach(region => {
            if (searchTerm && !region.name.toLowerCase().includes(searchTerm)) {
                return;
            }
            
            const isSubscribed = subscribedCodes.includes(region.code);
            const card = document.createElement('div');
            card.className = 'region-card';
            card.innerHTML = `
                <div class="region-name">${region.name}</div>
                <button class="subscribe-btn ${isSubscribed ? 'subscribed' : ''}" 
                        data-region="${region.code}"
                        data-subscribed="${isSubscribed}">
                    <span class="btn-text">${isSubscribed ? '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'}</span>
                    <span class="btn-icon">${isSubscribed ? 'üîî' : 'üîï'}</span>
                </button>
            `;
            container.appendChild(card);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    async function toggleSubscription(button) {
        const regionCode = button.dataset.region;
        const wasSubscribed = button.dataset.subscribed === 'true';
        
        button.disabled = true;
        button.classList.add('processing');
        
        try {
            const response = await fetch('/storms/toggle-subscription/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrfToken
                },
                body: JSON.stringify({ region_code: regionCode })
            });
            
            const data = await response.json();
            
            if (data.status === 'success') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ç–≤–µ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞
                const isNowSubscribed = data.action === 'subscribed';
                updateButtonState(button, isNowSubscribed);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
                const index = subscribedCodes.indexOf(regionCode);
                if (isNowSubscribed && index === -1) {
                    subscribedCodes.push(regionCode);
                } else if (!isNowSubscribed && index !== -1) {
                    subscribedCodes.splice(index, 1);
                }
                
                console.log('Subscription updated:', {
                    region: regionCode,
                    was: wasSubscribed,
                    now: isNowSubscribed,
                    subscribedCodes: subscribedCodes
                });
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            updateButtonState(button, wasSubscribed);
        } finally {
            button.disabled = false;
            button.classList.remove('processing');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    searchInput.addEventListener('input', () => renderRegions(searchInput.value));
    clearSearchBtn.addEventListener('click', () => {
        searchInput.value = '';
        renderRegions();
        searchInput.focus();
    });
    
    container.addEventListener('click', (e) => {
        const button = e.target.closest('.subscribe-btn');
        if (button) toggleSubscription(button);
    });

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    renderRegions();
});
